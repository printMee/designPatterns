#include<iostream>
using namespace std;

//仍是第一章计算器的例子：
/*
1.写一个加法程序，很快在一个main函数中就完成，此时变化还没有发生。

2.添加一个减法功能，这时如果增加功能时修改原来的主函数，这就违背了‘开放-封闭
原则’，于是考虑重构程序，增加一个抽象的运算类，通过一些面向对象的手段，如继承，
多态等来隔离具体加法、减法与main(客户端)耦合，需求依然可以满足，还能应对变化。

3.添加乘除法功能，你就不需要再去更改main(客户端)以及加法减法的类了，而是增加
乘法和除法子类就可。即面对需求，对程序的改动是通过增加新代码进行的，而不是更改
现有的代码。

*/

